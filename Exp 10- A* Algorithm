import heapq

class Node:
    def __init__(self, position, parent=None, g=0, h=0):
        self.position = position  # (x, y)
        self.parent = parent
        self.g = g  # Cost from start to current node
        self.h = h  # Heuristic (estimated cost to goal)
        self.f = g + h  # Total cost

    def __lt__(self, other):
        return self.f < other.f

def heuristic(a, b):
    # Manhattan distance
    return abs(a[0] - b[0]) + abs(a[1] - b[1])

def astar(grid, start, goal):
    open_list = []
    closed_set = set()

    start_node = Node(start, None, 0, heuristic(start, goal))
    heapq.heappush(open_list, start_node)

    while open_list:
        current = heapq.heappop(open_list)

        if current.position == goal:
            path = []
            while current:
                path.append(current.position)
                current = current.parent
            return path[::-1]

        closed_set.add(current.position)

        # 4-directional movement
        for dx, dy in [(-1,0), (1,0), (0,-1), (0,1)]:
            x, y = current.position[0] + dx, current.position[1] + dy
            if 0 <= x < len(grid) and 0 <= y < len(grid[0]) and grid[x][y] == 0:
                neighbor_pos = (x, y)
                if neighbor_pos in closed_set:
                    continue

                g_cost = current.g + 1
                h_cost = heuristic(neighbor_pos, goal)
                neighbor_node = Node(neighbor_pos, current, g_cost, h_cost)

                # Check if neighbor already in open_list with lower f
                skip = False
                for open_node in open_list:
                    if neighbor_pos == open_node.position and neighbor_node.f >= open_node.f:
                        skip = True
                        break
                if not skip:
                    heapq.heappush(open_list, neighbor_node)

    return None  # No path found

# Example usage
grid = [
    [0, 0, 0, 0, 0],
    [1, 1, 0, 1, 0],
    [0, 0, 0, 1, 0],
    [0, 1, 1, 1, 0],
    [0, 0, 0, 0, 0]
]

start = (0, 0)
goal = (4, 4)

path = astar(grid, start, goal)
if path:
    print("Path found:")
    for step in path:
        print(step)
else:
    print("No path found.")
