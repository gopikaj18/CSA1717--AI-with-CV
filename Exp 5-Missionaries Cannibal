from collections import deque

# Define the initial and goal states
initial_state = (3, 3, 1)  # (Missionaries Left, Cannibals Left, Boat on Left)
goal_state = (0, 0, 0)

# All possible moves (M, C)
moves = [(1, 0), (2, 0), (0, 1), (0, 2), (1, 1)]

def is_valid(state):
    M_left, C_left, _ = state
    M_right = 3 - M_left
    C_right = 3 - C_left

    # Check for valid numbers
    if not (0 <= M_left <= 3 and 0 <= C_left <= 3):
        return False
    if not (0 <= M_right <= 3 and 0 <= C_right <= 3):
        return False

    # Check missionaries are not outnumbered
    if (M_left > 0 and M_left < C_left) or (M_right > 0 and M_right < C_right):
        return False

    return True

def get_successors(state):
    successors = []
    M_left, C_left, boat = state

    for m, c in moves:
        if boat == 1:  # Boat on left side
            new_state = (M_left - m, C_left - c, 0)
        else:  # Boat on right side
            new_state = (M_left + m, C_left + c, 1)

        if is_valid(new_state):
            successors.append(new_state)

    return successors

def bfs():
    queue = deque()
    visited = set()
    parent = {}

    queue.append(initial_state)
    visited.add(initial_state)
    parent[initial_state] = None

    while queue:
        state = queue.popleft()

        if state == goal_state:
            path = []
            while state:
                path.append(state)
                state = parent[state]
            return path[::-1]  # Return reversed path

        for successor in get_successors(state):
            if successor not in visited:
                visited.add(successor)
                parent[successor] = state
                queue.append(successor)

    return None

# Run the BFS and print the solution path
solution = bfs()
if solution:
    print("Solution path:")
    for step in solution:
        print(step)
else:
    print("No solution found.")
